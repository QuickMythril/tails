#!/bin/sh

set -x

#ns=tbbNs
guestVeth="veth0"

set -ue


delete_netns() {
    # $1 = netns basename
    basename="$1"
    nsName="${basename}"
    hostVeth="veth-${basename}"
    ip link del "$hostVeth" || true
    ip netns del "$nsName" || true
}

create_netns() {
    # $1 = netns basename
    # $2 = network XXX
    if ! [ $# -eq 2 ]; then
        echo "Wrong usage for create_netns" >&2
        exit 2
    fi
    basename="$1"
    network="$2"
    nsName="${basename}"
    hostVeth="veth-${basename}"
    if [ "${#hostVeth}" -ge 16 ]
    then
        echo "netns name too long '${hostVeth}'; it would have a veth name >= 16"
        exit 2
    fi
    hostAddress="${network}:1"
    guestAddress="${network}:2"
    ip netns add "$nsName"

    # create veth
    ip netns exec "$nsName" ip link set dev lo up
    ip link add "$hostVeth" type veth peer name "$guestVeth"

    # setup veth
    ip link set veth0 netns "$nsName"
    ip addr flush dev "$hostVeth"
    ip netns exec "$nsName" ip addr flush dev "$guestVeth"
    ip addr add "${hostAddress}/120" dev "$hostVeth"
    ip link set dev "$hostVeth" up
    ip netns exec "$nsName" ip addr add "${guestAddress}/120" dev "$guestVeth"
    ip netns exec "$nsName" ip link set dev "$guestVeth" up
}

if [ "$#" -ne 1 ]
then
    echo "Wrong usage: $0 start|stop" >&2
    exit 2
fi

if [ "$1" = stop ]
then
    delete_netns tbb
    delete_netns onioncircs
    delete_netns tca
    delete_netns onionshare
    delete_netns test
    exit
fi

if [ "$1" = start ]
then
    modprobe veth
    modprobe xt_MASQUERADE
    modprobe xt_nat
    netBase='fe80::'
    create_netns tbb "${netBase}1"
    create_netns onioncircs "${netBase}2"
    create_netns tca "${netBase}3"
    create_netns onionshare "${netBase}4"
    create_netns test "${netBase}5"
fi
