#!/usr/bin/python3

# On success, prints the value of the date header in ISO 8601 format.

# On supported failures, print the type of failure to stdout,
# and exit with a well-defined return code.

import email.utils
import pycurl
import sys
from pathlib import Path
from typing import Dict, Optional

# For https://fedoraproject.org/static/hotspot.txt
EXPECTED_RESPONSE = "OK"

RETURN_CODE = {
    "missing-date-header": 2,
    "malformed-date-header": 3,
    "http-failure": 4,
    "captive-portal": 5,
}


def fail(error: str):
    print(error)
    sys.exit(RETURN_CODE[error])


class NMishCurlClient(object):
    """Wrapper around a curl client to emulate the fingerprintable
    network behavior of NetworkManager's connectivity check"""

    def __init__(self, url: str):
        self.headers: Dict[str, str] = {}
        self.body = ""
        c = pycurl.Curl()
        c.setopt(c.URL, url)
        c.setopt(c.WRITEFUNCTION, self.write_cb)
        c.setopt(c.HEADERFUNCTION, self.header_cb)
        c.setopt(c.HTTPHEADER, ["Connection: close"])
        c.setopt(c.IPRESOLVE, c.IPRESOLVE_V4)
        self.client = c

    def perform(self):
        return self.client.perform()

    def header_cb(self, header_line) -> Optional[int]:
        # HTTP standard specifies that headers are encoded in iso-8859-1.
        header_line = header_line.decode("iso-8859-1")

        if ":" not in header_line:
            return None

        name, value = header_line.split(":", 1)
        name = name.strip()
        value = value.strip()
        name = name.lower()
        self.headers[name] = value

        return None

    def write_cb(self, data: bytes) -> Optional[int]:
        self.body += data.decode()

        return None

    def response_code(self):
        return self.client.getinfo(self.client.RESPONSE_CODE)

    def close(self):
        return self.client.close()


def main():
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--url-file",
        type=str,
        default="/etc/tails-get-network-time-url",
        action="store",
    )
    args = parser.parse_args()

    url = Path(args.url_file).read_text().rstrip()
    c = NMishCurlClient(url=url)

    try:
        c.perform()
        code = c.response_code()
    except pycurl.error:
        fail("http-failure")
    finally:
        c.close()

    if code == 200:
        if c.body == EXPECTED_RESPONSE:
            try:
                date = c.headers["date"]
            except KeyError:
                fail("missing-date-header")
            try:
                dt = email.utils.parsedate_to_datetime(date)
            except Exception:
                fail("malformed-date-header")
            print(dt.isoformat())
            sys.exit(0)

        else:
            fail("captive-portal")
    else:
        fail("http-failure")


if __name__ == "__main__":
    main()
