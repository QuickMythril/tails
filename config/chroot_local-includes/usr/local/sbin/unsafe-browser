#!/bin/sh

set -e
set -u

. gettext.sh
TEXTDOMAIN="tails"
export TEXTDOMAIN

# Import the TBB_EXT variable.
. /usr/local/lib/tails-shell-library/tor-browser.sh

# Import localized_tails_doc_page().
. /usr/local/lib/tails-shell-library/localization.sh

# Import setup_chroot_for_browser(), configure_chroot_browser(),
# and run_browser_in_chroot().
. /usr/local/lib/tails-shell-library/chroot-browser.sh

# Import nm_is_connected
. /usr/local/lib/tails-shell-library/network.sh

# Import export_gnome_env()
. /usr/local/lib/tails-shell-library/gnome.sh


_zenity () {
    DBUS_SESSION_BUS_ADDRESS="$(
        export_gnome_env
        echo "${DBUS_SESSION_BUS_ADDRESS}"
    )"
    AT_SPI_BUS_ADDRESS="$(
        sudo -u "${SUDO_USER}" \
            env DBUS_SESSION_BUS_ADDRESS="${DBUS_SESSION_BUS_ADDRESS}" \
            dbus-send --session --print-reply=literal \
                --dest=org.a11y.Bus /org/a11y/bus org.a11y.Bus.GetAddress \
                | sed 's/^ *//'
    )"
    sudo -u "${SUDO_USER}" \
         env AT_SPI_BUS_ADDRESS="${AT_SPI_BUS_ADDRESS}" \
         /usr/bin/zenity "${@}"
}

error () {
    local cli_text dialog_text
    cli_text="${CMD}: $(gettext "error:") ${*}"
    dialog_text="<b><big>$(gettext "Error")</big></b>

${*}"
    echo "${cli_text}" >&2
    _zenity --error --ellipsize --title "" --text "${dialog_text}"
    exit 1
}

verify_start () {
    # Make sure the user really wants to start the browser
    local dialog_msg launch exit
    dialog_msg="<b><big>$(gettext "Launch the Unsafe Browser?")</big></b>

$(gettext "The Unsafe Browser is not anonymous and the websites that you visit can see your real IP address.\n\nOnly use the Unsafe Browser to sign in to a network using a captive portal.")"
    launch="$(gettext "_Launch")"
    exit="$(gettext "_Exit")"
    if ! _zenity --question --ellipsize --title "" --text "${dialog_msg}" \
         --default-cancel --ok-label "${launch}"  --cancel-label "${exit}"; then
        exit 0
    fi
}

show_start_notification () {
    local title body
    title="$(gettext "Starting the Unsafe Browser...")"
    body="$(gettext "This may take a while, so please be patient.")"
    tails-notify-user "${title}" "${body}" 10000
}

show_shutdown_notification () {
    local title body
    title="$(gettext "Shutting down the Unsafe Browser...")"
    body="$(gettext "This may take a while, and you may not restart the Unsafe Browser until it is properly shut down.")"
    tails-notify-user "${title}" "${body}" 10000
}

# Main script:

CMD="$(basename "${0}")"
LOCK="/var/lock/${CMD}"
CONF_DIR="/var/lib/unsafe-browser"
COW="${CONF_DIR}/cow"
CHROOT="${CONF_DIR}/chroot"
BROWSER_NAME="unsafe-browser"
BROWSER_USER="amnesia"
HUMAN_READABLE_NAME="$(gettext "Unsafe Browser")"
if [ -f /run/tor-has-bootstrapped/done ]; then
    WARNING_PAGE='/usr/share/doc/tails/website/misc/unsafe_browser_warning'
else
    WARNING_PAGE='/usr/share/doc/tails/website/misc/captive_portal_warning'
fi
HOME_PAGE="$(localized_tails_doc_page "${WARNING_PAGE}")"

# Prevent multiple instances of the script.
exec 9>"${LOCK}"
if ! flock -x -n 9; then
    error "$(gettext "Another Unsafe Browser is currently running, or being cleaned up. Please retry in a while.")"
fi

verify_start
show_start_notification

echo "* Setting up chroot"
setup_chroot_for_browser "${CHROOT}" "${COW}" "${BROWSER_USER}" || \
    error "$(gettext "Failed to setup chroot.")"

echo "* Configuring chroot"
configure_chroot_browser "${CHROOT}" "${BROWSER_USER}" "${BROWSER_NAME}" \
    "${HUMAN_READABLE_NAME}" "${HOME_PAGE}" \
    "${TBB_EXT}"/langpack-*.xpi \
    /usr/share/tails/chroot-browsers/unsafe-browser/extensions/*.xpi || \
        error "$(gettext "Failed to configure browser.")"
if ! nm_is_connected; then
    error "$(gettext "You are not connected to a local network yet.\n\nTo be able to start the Unsafe Browser, you first need to connect to a Wi-Fi, wired, or mobile network.")"
fi

# Disable some Firefox "phone home" features
# (https://bugzilla.mozilla.org/show_bug.cgi?id=1598562)
echo '127.0.0.42 firefox.settings.services.mozilla.com' \
     >> "${CHROOT}"/etc/hosts

echo "* Starting Unsafe Browser"
# Do not localize the 5th argument: it becomes WM_CLASS and then GNOME
# displays the localized app name found in the matching .desktop file;
# if WM_CLASS were localized then not only string encoding problems
# would happen, but GNOME would pick the wrong icon. It is also passed
# as the value for the --name Firefox option.
WM_CLASS='Unsafe Browser'
PROFILE="$(browser_profile_dir "${BROWSER_NAME}" "${BROWSER_USER}")"
CHROOT_USER_UID="$(id --user "${BROWSER_USER}")"

(python3 || error "$(gettext "Failed to run browser.")") <<EOF
import tailslib.netnsdrop
tailslib.netnsdrop.run_in_netns(
    "/bin/sh", "-c",
    ". /usr/local/lib/tails-shell-library/tor-browser.sh && \
     export TOR_TRANSPROXY=1 && \
     export MOZ_ENABLE_WAYLAND=1 && \
     exec_firefox_helper firefox.unsafe-browser \
         --class '${WM_CLASS}' \
         --name '${WM_CLASS}' \
         --profile '${PROFILE}'",
    netns="clearnet",
    root="${CHROOT}",
    bind_mounts=[
        ("/home", "/home"),
        ("${CHROOT}/${PROFILE}", "${PROFILE}"),
        ("/etc/resolv-over-clearnet.conf", "/etc/resolv.conf"),
        ("/run/user/${CHROOT_USER_UID}/pipewire-0", "/run/user/${CHROOT_USER_UID}/pipewire-0"),
        ("/run/user/${CHROOT_USER_UID}/pulse", "/run/user/${CHROOT_USER_UID}/pulse"),
        ("/run/user/${CHROOT_USER_UID}/wayland-0", "/run/user/${CHROOT_USER_UID}/wayland-0"),
        ("/sys", "/sys"),
    ]
)
EOF

echo "* Exiting the Unsafe Browser"
show_shutdown_notification

exit 0
