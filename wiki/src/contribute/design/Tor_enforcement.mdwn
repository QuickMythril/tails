We [[promise our users|about]] that everything the user does on the Internet
from Tails goes through the [Tor network](https://www.torproject.org/).

Here is how we interpret and implement this promise.

[[!toc levels=2]]

DNS
===

[[!inline pages="contribute/design/Tor_enforcement/DNS" raw=yes sort="age"]]

Network filter
==============

[[!inline pages="contribute/design/Tor_enforcement/Network_filter" raw=yes sort="age"]]

Other non-Tor traffic
=====================

When the user [allows Tails to connect to Tor
automatically](https://gitlab.tails.boum.org/tails/blueprints/-/wikis/network_connection#consent-question),
they consent to Tails initiating Internet activity without going through Tor, in
order to help them connect to Tor.

This can be useful, for example, to set the clock correctly or detect
captive portals.

Guidelines
----------

- Do our best even when we can't be perfect: take into account less advanced
  adversaries too

  We should do our best to make it less obvious to less advanced adversaries,
  for example home surveillance (such as abusive partner or parents), even when
  we can't protect against more advanced ones (such as the ISP).

- Try to blend in: make the "anonymity set" as large as possible

  For example, if the best we can do is to look somewhat like a Fedora/Ubuntu
  user who has tor installed, it's already useful against some adversaries.

- Keep it simple to avoid maintenance churn

  Whenever we try to emulate the behavior of another piece of software than
  Tails in order to blend in, we should emulate software that we can understand
  easily and that does not change its behavior too often.

- Take into account connection patterns

  Two connections in a row or more to the same organization or hosting service
  may be more identifiable than 1 single connection, by said organization or by
  the user's ISP. So we should try to get as much information as we can from
  every such connection.

- Avoid services in a position to aggregate lots of data

  Omnipresent Internet actors, such as the NSA, Google, AWS, or Cloudflare, can
  correlate Tails' non-Tor activity with other data they aggregate. We should
  try to make it non-trivial to such adversaries that the connection is coming
  from a Tails user, to make such correlation more difficult.

- Use reliable services

  We're doing non-Tor connections in order to improve UX. If these connections
  rely on unreliable services, then we either have to take the risk that we'll
  get users confused, or spend more time of software design, development, and
  maintenance, in order to deal with the unreliability. Both outcomes are
  problematic, so we should try to connect to reliable services.

  In passing, note that falling back to another service when the first attempted
  one is unreliable, can be used as an identifiable pattern by both passive and
  active adversaries.

Case studies
------------

### Time synchronization

- Google captive portal detection: no (aggregation)
  ⇒ perfect except against Google

- Fedora's captive portal detection

  Run by Red Hat, some of it at AWS ⇒ fails aggregation
  to some degree; Amazon can get the same data, and does not see
  the HTTP implementation details,
  but is probably less motivated to do so than Google.
  ⇒ somewhat less bad than Google wrt. aggregation,
  but blends in less than Google vs. ISP (DNS request)

- Debian's NM captive portal detection
  (apt install network-manager-config-connectivity-debian)
  few users: 0.5% of Debian NetworkManager users according to popcon
  ⇒ fails the "blend in" guideline.
  ok wrt. other guidelines
  ⇒ not good if your adversary is your ISP or home surveillance;
  better than Riseup on all counts

- get time from Riseup via a HTTPS request to https://mail.riseup.net/
  or https://riseup.net/canary (HTP)
  - does not meet the "connection pattern" guideline: short lived connection,
    not fetching related web resources ⇒ we don't blend in any bigger set
    of users from the ISP's perspective, and from Riseup's
  - reliability: great but not spotless; would perhaps not be a blocker
    if it were the only issue
  ⇒ not good if your adversary is your ISP or home surveillance

- Ubuntu's captive portal detection
  - connectivity-check.ubuntu.com → 3 Google IP addresses
    ⇒ leaks more info to the ISP, home surveillance, and Google,
    than to using Google's captive portal detection page directly

- Firefox' captive portal detection
  - harder to track (internal implementation detail of Firefox,
    rather than a public API'ish setup like NM) → fails "Keep it simple". But at the moment it's just a
    document containing the string "success"
  - detectportal.firefox.com → AWZ, Google IP addresses → fails "aggregation"
  - keep in mind that firefox uses NSS so it's not a curl/wget call away,
    but probably not too hard either
  ⇒ worse than using Google directly (leaks) or Fedora@AWS (maintainability)


- Ubuntu/Fedora NTP pool
  - cleartext, no authentication → ISP can replay bad Tor consensus
  - only gives us the time, not captive portal detection
    ⇒ if we have to do captive portal detection anyway, then there's no reason
    to do NTP on top

Currently implemented
---------------------

At the time we're writing this, no such background non-torified
Internet connection is implemented in current Tails.
